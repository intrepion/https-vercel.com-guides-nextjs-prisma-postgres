name: Vercel Production Deployment

env:
  POSTGRES_DATABASE: ${{ secrets.POSTGRES_DATABASE }}
  POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  POSTGRES_PRISMA_URL: ${{ secrets.POSTGRES_PRISMA_URL }}
  POSTGRES_URL: ${{ secrets.POSTGRES_URL }}
  POSTGRES_URL_NO_SSL: ${{ secrets.POSTGRES_URL_NO_SSL }}
  POSTGRES_URL_NON_POOLING: ${{ secrets.POSTGRES_URL_NON_POOLING }}
  POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

on:
  push:
    branches:
      - main

defaults:
  run:
    working-directory: ./blogr-nextjs-prisma

jobs:
  Deploy-Production:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          cache: npm
          cache-dependency-path: ./blogr-nextjs-prisma/package-lock.json
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Check formatting
        run: npm run prettier:check

      - name: Build application
        run: npm run build --if-present

      - name: Run unit tests
        run: npm run test

      - name: Run application in background
        run: npm run dev &

      - name: Run end to end tests
        run: npm run cypress:run

      - name: Upload screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots-${{ matrix.node-version }}
          path: blogr-nextjs-prisma/cypress/screenshots

      - name: Install Vercel CLI
        run: npm install --global vercel@canary

      - name: Pull Vercel Environment Information
        run: vercel pull --environment=production --token=${{ secrets.VERCEL_TOKEN }} --yes
        working-directory: ./

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: ./

      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: ./
